#!/bin/bash

#=================================
. /home/sita/script/include/console.color
. /home/sita/script/include/persistent

#=================================
utf8() {
	export LC_ALL=en_US.UTF-8
	export LANG=en_US.UTF-8
	export LANGUAGE=en_US.UTF-8
}

#=================================
load_alias() {

	for f in /home/sita/script/minecraft/alias/*; do  # or wget-*.sh instead of *.sh
		# . "$f" -H || break # if needed 
		[ ! -f "$f" ] || . "$f" -H
	done
}

#=================================
mcserver() { 
#	echo /home/sita/script/minecraft/$mcver $*
#	/home/sita/script/minecraft/$mcver $*

	if [ -z ${mcver+x} ]; then
		echo mcver not set
	else
		tempsh=/tmp/$mcver
		if [ ! -f $tempsh ]; then
			# echo 'echo /home/sita/script/minecraft/minecraft.server $*' > $tempsh
			echo "#!/bin/bash" > $tempsh
			echo . /home/sita/script/minecraft/minecraft.server '$*' >> $tempsh
			chmod +x $tempsh
		fi
		[ $mcecho_off ] || echo -e "${GREEN}=== $mcver $*${NC}"
		$tempsh $*
	fi
}

mcdo() {
	mcserver do $*
}

#=================================
chmc() {
	if [ ! -z ${1+x} ]; then
		export mcver=$1
		
		mcpath=/mnt/runtimes/$mcver
		[ ! -d "$mcpath" ] && { echo -e "${YELLOW}$mcpath not installed${NC}"; }
		# [   -d "$mcpath" ] && { echo -e ${YELLOW}mcver=$mcver${NC}; cd $mcpath; }
		[   -d "$mcpath" ] && { cd $mcpath; }
	fi
}

#=================================
filehas() {
	cat $1 | grep -F --quiet "$2"
	return $?
}

#=================================
pause() {
	read -p "Press any key to continue... " -n1 -s
	echo 
}

#=================================
game_list_maxplayer() {
    basedir=$1
    for dir in "$basedir"/*; do
        if test -d "$dir"; then            
            [ -f $dir/server.properties ] && echo $dir && cat $dir/server.properties | grep 'max-players'
        fi
    done
}

#=================================
get_myip() {
	echo $(curl -s https://api.ipify.org)
}

#=================================
geolocation0() {
    ip=$1
    echo -e ${GREEN}$(curl freegeoip.net/xml/$ip 2>/dev/null | grep 'RegionName\|CountryName' | sed 's/<[\/]*\w*>//g' | xargs), IP=${ip} ${NC}
}

#=================================
geolocation() {
    ip=$1
    echo -e ${GREEN}$(curl -s ipinfo.io/$ip | grep 'hostname\|loc\|city\|region\|country' | sed 's/<[\/]*\w*>//g' | xargs) ip: ${ip} ${NC}
}

#=================================
georaw() {
	curl -s ipinfo.io/$1
}

#=================================
geolocateWithCache() {
    ip=$1
	eval "$(dbload 'iplocations')"
    
    key=$(echo $ip|tr -d '.')
    if [ -z "${iplocations[$key]}" ]; then
        echo -e ${YELLOW}Querying...${NC}
        result=$(geolocation $ip)
        iplocations[$key]=$result
    fi
    echo "${iplocations[$key]}"
    
	[ ! -z "${!iplocations[*]}" ] && dbsave "iplocations" "$(declare -p iplocations)"
}

#=================================
digthis() {
    dig $1 | grep IN | grep -v ";"
}

#=================================
check_creeper_ip() {
    geolocateWithCache $(get_myip)
    digthis home.changen.com.tw
    echo =================================
    digthis mc.creeper.tw
    # digthis tp1.creeper.tw
    digthis gem.creeper.tw
    digthis wiki.creeper.tw
    digthis db.creeper.tw
    digthis redis.creeper.tw
    # digthis r53.creeper.tw
    # echo =================================
    # digthis lb.creeper.tw
    # digthis uhc.creeper.tw
    # digthis www.creeper.tw
}

#=================================
ping_accept_onoff() {
    [ -f /etc/iptables.conf ] && ping_accept=1
    
    if [ -z "$ping_accept" ]; then
        ping_accept=1; export ping_accept
        echo -e ${GREEN}Disable ping response${NC}
        sudo iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
        sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type echo-request -j DROP
        sudo iptables-save | sudo tee /etc/iptables.conf
        sudo ip6tables-save | sudo tee /etc/ip6tables.conf
    else
        unset ping_accept
        echo -e ${YELLOW}Enable ping response${NC}
        sudo iptables -D INPUT -p icmp --icmp-type echo-request -j DROP
        sudo ip6tables -D INPUT -p icmpv6 --icmpv6-type echo-request -j DROP
        sudo rm /etc/iptables.conf
        sudo rm /etc/ip6tables.conf
    fi
}

#=================================
alias_reload() {
    . ~/script/mis/alias.mis
    . ~/script/minecraft/alias.minecraft
}

#=================================
PS1="${CYAN}[\$mcver]\u@\h:${NC}\n\w\\$ "

#=================================
utf8
load_alias
# [ $mcver ] || mc1112uc
# [ $mcver ] || s74

#=================================
alias a=alias
alias aed='vi ~/script/minecraft/alias.minecraft; are'
alias are='alias_reload'

#=================================
MCSCRIPT=~/script/init.d/hosts/$(hostname)
[ ! -f $MCSCRIPT ] && MCSCRIPT=~/script/init.d/hosts/default

help_add 'start' '開啟主機'
alias start='$MCSCRIPT start'
help_add 'mcstart' '開啟主機'
alias mcstart='$MCSCRIPT mcstart'
help_add 'stop' '關閉主機'
alias stop='sudo echo && $MCSCRIPT stop && sudo screen -dmS off shutdown -h now && exit'
help_add 'stop2' '關閉主機2'
alias stop2='$MCSCRIPT stop2'

#=================================
help_hline3 '其他(alias)'
help_add 'jsu' '同步伺服器javascript'
alias jsu='/mnt/runtimes/$mcver/plugins/Buscript/gitsync.sh'

help_add 'cc' '檢查DNS'
alias cc='check_creeper_ip'
help_add 'geo.<ip>' '檢查IP位置'
alias geo='geolocateWithCache'
help_add 'gg.<ip>' '檢查IP位置'
alias gg='georaw'

help_add 'gl' 'Gamelist'
alias gl='ls /mnt/runtimes/'
# help_add 'ggl' 'Gamelist.maxplayers'
alias ggl='game_list_maxplayer /mnt/runtimes'

help_add 'ppp' 'ping回應On/Off'
alias ppp='ping_accept_onoff'
