#!/bin/bash

#=================================
. /home/sita/script/include/persistent

#=================================
# DBFILE=~/.db/iplocations.txt
# [ ! -d ~/.db ] && mkdir ~/.db

#=================================
help_hline3 '紀錄搜尋(logfind)'

#=================================
is_ip_address() {
	[[ $1 =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] && return 0 || return 1
}

is_minecraft_id() {
	[[ $1 =~ ^[a-zA-Z0-9_]{3,16}$ ]] && return 0 || return 1
}

is_files_existed() {
	for i in $1; do test -f "$i" && return 0; done
	return 1
}

is_bc_log() {
	[[ $1 = *"proxy"* ]] && return 0 || return 1
}

#=================================
dcat() {
	[ ! -z "$1" ] && logfile="$1"
	[ -z "$logfile" ] && logfile=/mnt/runtimes/$mcver/logs/latest.log
	extension="${logfile##*.}"
	[ $extension == "gz" ] && gzip -cd "$logfile" || cat "$logfile"
}

geolocate_mc() {
	inputlog=/tmp/geolocate_mc.tmp
	cat >$inputlog
	
	eval "$(dbload 'iplocations')"
	
	ips=$(cat $inputlog|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
	for ip in $ips;	do
        key=$(echo $ip|tr -d '.')
        if [ -z "${iplocations[$key]}" ]; then
            echo -e ${YELLOW}Querying...${NC}
            result=$(geolocation $ip)
            iplocations[$key]=$result
            # echo $result ...
        # else
            # echo ${iplocations[$key]} ..
        fi
		
		names=$(cat $inputlog| grep $ip | grep -v 'anned\|protocolsupport\|GameProfile' | grep -E "[a-zA-Z0-9_]{3,16}" | awk -F'[' '{ printf ("%s\n",$3) }' | awk -F':' '{ printf ("%s\n",$2) }' | sort | uniq)
		banned=$(cat $inputlog| grep $ip | grep banned | awk -F':' '{ printf ("%s %s\n",$6,$9) }' | sort | uniq)
		
        names=$(echo ${names}|tr -d '\n')
        banned=$(echo ${banned}|tr -d '\n')
		
        [ -z "$banned" ] && echo "${iplocations[$key]}| $names" || echo -e "${iplocations[$key]}| $names | ${RED}$banned${NC}"
		
	done
    
	# DBFILE="$DBPATH/iplocations.txt"
	# FILESIZE1=$(stat -c%s "$DBFILE")
	[ ! -z "${!iplocations[*]}" ] && dbsave "iplocations" "$(declare -p iplocations)"
	# FILESIZE2=$(stat -c%s "$DBFILE")
	# [ ! -z "$names" ] && echo -e "${YELLOW}Size of $(basename $DBFILE) = $FILESIZE1 bytes read, $FILESIZE2 bytes written.${NC}"
}

geolocate_bc() {
	# echo geolocate_bc ...
	# echo .
	inputlog=/tmp/geolocate_bc.tmp
	cat >$inputlog
	
	eval "$(dbload 'iplocations')"
	
	ips=$(cat $inputlog|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
	for ip in $ips;	do
        key=$(echo $ip|tr -d '.')
        if [ -z "${iplocations[$key]}" ]; then
            echo -e ${YELLOW}Querying...${NC}
            result=$(geolocation $ip)
            iplocations[$key]=$result
        fi
		
		names=$(cat $inputlog| grep -C 1 $ip | grep 'ServerConnector' | awk -F'[' '{ printf ("%s\n",$3) }' | awk -F']' '{ printf ("%s\n",$1) }' | sort | uniq)
		# banned=$(cat $inputlog| grep -C 1 $ip | grep banned | awk -F'[' '{ printf ("%s\n",$3) }' | awk -F']' '{ printf ("%s\n",$1) }' | sort | uniq)
		banned=$(cat $inputlog| grep -C 2 $ip | grep banned | awk '{$1="";$2="";print $0;}' | sort | uniq)
		
        names=$(echo ${names}|tr -d '\n')
        banned=$(echo ${banned}|tr -d '\n')
		
        [ -z "$banned" ] && echo "${iplocations[$key]}| $names" || echo -e "${iplocations[$key]}| $names | ${RED}$banned${NC}"
		
	done
	
	# DBFILE="$DBPATH/iplocations.txt"
	# FILESIZE1=$(stat -c%s "$DBFILE")
	[ ! -z "${!iplocations[*]}" ] && dbsave "iplocations" "$(declare -p iplocations)"
	# FILESIZE2=$(stat -c%s "$DBFILE")
	# [ ! -z "$names" ] && echo -e "${YELLOW}Size of $(basename $DBFILE) = $FILESIZE1 bytes read, $FILESIZE2 bytes written.${NC}"
}

usernamelocate_mc() {
	grep 'logged\|banned' | grep -E "[a-zA-Z0-9_]{3,16}"
}

usernamelocate_bc() {
	# echo usernamelocate_bc ...
	grep 'ServerConnector' | grep -E "[a-zA-Z0-9_]{3,16}"
}

#=================================
log_all_find_general() {
	mode=$1
	shift 1
	for_all_logs $mode find_general "$1" "$2"
}

log_file_find_general() {
	mode=$1
	shift 1
	
	if [ $mode != "ip" ]; then
		# echo $* >/tmp/debug
		files="$1"
		shift 1
		# echo $* >/tmp/debug
		for file in $files; do
			for_log $mode $file find_general "$1" "$2"
		done
	else
		files=$*
		for file in $files;	do
			for_log $mode $file
		done
	fi
}

log_find_general() {
	mode=$1
	shift 1
	for_latest_log $mode find_general "$1" "$2"
}

#=================================
for_log() {
	tmp=/tmp/logfind.tmp
	
	mode=$1
	logs=$2
	find=$3
	shift 3
	
	for log in $logs; do
		if [ $mode == "normal" ]; then
			arg1="$1"
			# echo normal, $arg1
			$find "$log" $* | grep 'INFO' | grep -v 'ViaBackwards\|UpstreamBridge\|disconnected\|DiscordSRV\|UUID\|FairPlayMinecraft\|lost\|left\|default' >$tmp
			[ -s $tmp ] && echo -e ${YELLOW}============================ $(basename "$log"), $* ============================${NC}
			[ -s $tmp ] && cat $tmp
				
			if is_ip_address "$arg1"; then
				# echo ip_address
				is_bc_log "$log" && cat $tmp | usernamelocate_bc
				is_bc_log "$log" || cat $tmp | usernamelocate_mc
			elif is_minecraft_id "$arg1"; then
				# echo minecraft_id
				is_bc_log "$log" && cat $tmp | geolocate_bc
				is_bc_log "$log" || cat $tmp | geolocate_mc
			fi
		elif [ $mode == "keyword" ]; then
			# echo keyword
			find_keyword "$log" $* >$tmp
			[ -s $tmp ] && echo -e ${YELLOW}================= $(basename "$log"), keyword: $* =================${NC}
			[ -s $tmp ] && find_keyword "$log" $*
		elif [ $mode == "ip" ]; then
			# echo ip
			is_bc_log "$log" && dcat "$log" | geolocate_bc >$tmp
			is_bc_log "$log" || dcat "$log" | geolocate_mc >$tmp
			[ -s $tmp ] && echo -e ${YELLOW}============================ $(basename "$log") ============================${NC} || printf "."
			[ -s $tmp ] && cat $tmp
		fi
	done
}

#=================================
for_latest_log() {
	tmp=/tmp/logfind.tmp
	log=/mnt/runtimes/$mcver/proxy.log.0
	[ ! -f "$log" ] && log=/mnt/runtimes/$mcver/logs/latest.log
	
	mode=$1
	shift 1
	
	for_log $mode "$log" $*
}

#=================================
for_all_logs() {
	tmp=/tmp/logfind.tmp
	tmp2=/tmp/logfind.2.tmp
	logs=/mnt/runtimes/$mcver/proxy.log.*
	is_files_existed $logs || logs=/mnt/runtimes/$mcver/logs/*.log*
	
	mode=$1
	# find=$1
	# arg1="$2"
	shift 1
	
	for log in $logs; do
		for_log $mode "$log" $*
	done
}

#=================================
find_general() {
	file="$1"
	arg1="$2"
	if is_ip_address "$arg1"; then
		find_ip $*
	elif is_minecraft_id "$arg1"; then
		find_username $*
	else
		find_keyword $*
	fi
}

find_ip() {
	log=$1
	ip=$2
	[ -z "$3" ] && range=0 || range=$3
	
	# echo log=$log
	# echo ip=$ip
	# echo range=$range
	
	dcat "$log" | grep -C $range $ip
}

find_username() {
	log=$1
	username=$2
	[ -z "$3" ] && range=0 || range=$3
	
	# echo log=$log
	# echo username=$username
	# echo range=$range
	
	dcat "$log" | grep -C $range $username
}

find_keyword() {
	log=$1
	shift 1
	keyword="$*"
	range=3
	
	# echo log=$log
	# echo keyword=$keyword
	# echo range=$range
	
	dcat "$log" | grep -v 'ViaBackwards' | grep -C $range "$keyword"
}

#=================================
log_bungeecord_analyst() {
	[ -f "$1" ] && cat $1 | grep 'WARNING\|SEVERE' | grep -v 'ViaBackwards\|ViaVersion\|RedisBungee\|at io.netty\|at java.io\|at net.md_5\|at java.lang'
}

#=================================
help_add 'lff.<keyword>' '搜尋指定紀錄ip/username/keyword'
alias lff='log_file_find_general "normal"'
alias lffk='log_file_find_general "keyword"'
alias lffip='log_file_find_general "ip"'
help_add 'lf.<keyword>' '搜尋目前紀錄ip/username/keyword'
alias lf='log_find_general "normal"'
alias lfk='log_find_general "keyword"'
alias lfip='log_find_general "ip"'
help_add 'lfa.<keyword>' '搜尋全部紀錄ip/username/keyword'
alias lfa='log_all_find_general "normal"'
alias lfak='log_all_find_general "keyword"'
alias lfaip='log_all_find_general "ip"'

#=================================
help_add 'lba.<proxy.log>' '分析bclog'
alias lba='log_bungeecord_analyst'
