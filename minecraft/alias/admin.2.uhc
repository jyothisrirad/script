#!/bin/bash

#=================================
help_hline3 'UHC'

#=================================
# $1: default to wait for key press for each score
#     <num> to sleep <num> sec between each score
mcscores() {
	# echo $1 $2
	while : ; do
		mcserver do scoreboard objectives setdisplay sidebar FinalKill
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalEntity
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalDiamond
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalGold
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalStone
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalEat
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar List
		[[ $2 == 'forever' ]] || break
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
	done
}


#=================================
# friendlyfireSet() {
	# for t in R Y G A B P E r y g a b p e
	# do 
		# mcserver do scoreboard teams option $t friendlyfire $1
	# done
# }


#=================================
team_all_set() {
	# for t in R Y G A B P E r y g a b p e 0 1
	for t in R Y G A B P E r y g a b p e
	do 
		mcserver do scoreboard teams option $t $1 $2
	done
}

#=================================
playertaglist() {
    mcdo scoreboard players tag $1 list
}

#=================================
# aqua() { 
	# echo A 
# }

#=================================
uhcteams() {
	echo 隊伍ID:__[1]單人[0]旁觀者
	echo [R]紅隊__[Y]黃隊[G]綠隊__[A]青隊__[B]藍隊__[P]亮紫隊[E]灰隊
	echo [r]深紅隊[y]橘隊[g]深綠隊[a]深青隊[b]深藍隊[p]深紫隊[e]深灰隊
}

#=================================
list_players() {
    export LOG_DELAY=.5
    # players=$(mcdo list | grep.player)
    echo 線上玩家ID\($(mcdo list | grep.player | wc -l)\): 
    # echo $players | wc -l
    # echo $players
    mcdo list | grep.player
    export LOG_DELAY=.1
}

#=================================
# playerlist() {
	# echo 玩家ID:
	# mcdo list | grep.player
# }

#=================================
uhcstat() {
	LOG=/mnt/runtimes/$mcver/logs/list.log
	if [ -f "$LOG" ]; then 
		echo 上線名單:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/teams.log
	if [ -f "$LOG" ]; then 
		echo 參賽名單:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/slain.log
	if [ -f "$LOG" ]; then 
		echo 戰敗順序:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/winner.log
	if [ -f "$LOG" ]; then 
		echo 最後贏家:
		cat $LOG
	fi
}

#=================================
uhcinit() {
	mcdo replaceitem entity @a slot.hotbar.7 command_block
	mcdo replaceitem entity @a slot.hotbar.8 redstone_block
	mcdo time set 0
	mcdo op chsliu
	mcdo op creeper_arena
	mcdo gamemode 1 @a
    mcdo tp @a 0 100 0
}

#=================================
uhcset2() {
	mcdo wb set 504 player chsliu
	mcdo wb world fill
	mcdo wb fill confirm
}

#=================================
uhctitle() {
    num=$(echo $(date +%m)+5 | bc)
    dates=$(date '+%Y/%m/%d')
    weekBegin=$(date --date "$dates -`date +%d` days +1 days" +%U)
    lastSatofMon=$(ncal -h |awk '/Sa/ {print $(NF)}')
    weekEnd=$(date --date "$dates -`date +%d` days +$lastSatofMon days" +%U)
    weekNow=$(date +%U)
    weekDiff=$(echo $weekNow - $weekBegin + 1 | bc)
    headline=$([ $weekNow == $weekEnd ] && echo ===== || echo ====)
    title=$([ $weekNow == $weekEnd ] && echo 決賽 || echo 歡樂場$(num2roman $weekDiff))
    echo 第$num屆uhc苦力怕盃$title
}

#=================================
uhctitle_byfile() {
    num=$(echo $(date +%m -r $1)+5 | bc)
    dates=$(date '+%Y/%m/%d' -r $1)
    weekBegin=$(date --date "$dates -`date +%d -r $1` days +1 days" +%U)
    lastSatofMon=$(ncal -h |awk '/Sa/ {print $(NF)}')
    weekEnd=$(date --date "$dates -`date +%d -r $1` days +$lastSatofMon days" +%U)
    weekNow=$(date +%U -r $1)
    weekDiff=$(echo $weekNow - $weekBegin + 1 | bc)
    headline=$([ $weekNow == $weekEnd ] && echo ===== || echo ====)
    title=$([ $weekNow == $weekEnd ] && echo 決賽 || echo 歡樂場$(num2roman $weekDiff))
    echo $headline 第$num屆UHC苦力怕盃$title 比賽紀錄 $dates $headline
}

#=================================
uhcteamcreate() {
	tmpscrpit=/tmp/uhccreate
	mcdo list | grep.player | /home/sita/script/minecraft/uhc.team.select $1 >$tmpscrpit
	echo "=== $tmpscrpit"
	cat $tmpscrpit
	mcdo gamerule sendCommandFeedback false
	. $tmpscrpit
	# rm $tmpscrpit
}

#=================================
uhcteamchoice() {
	if [ ! -z ${1+x} ]; then 
		echo -e "${GREEN}加入隊伍權限On${NC}"
		mcdo scoreboard players set @e[tag=F] J 0	#加入隊伍權限Off
		mcdo scoreboard players set @e[tag=N] J 1	#加入隊伍權限On
	else
		echo -e "${YELLOW}加入隊伍權限Off${NC}"
		mcdo scoreboard players set @e[tag=F] J 1	#加入隊伍權限Off
		mcdo scoreboard players set @e[tag=N] J 0	#加入隊伍權限On
	fi
}

#=================================
uhcteammax() {
    if [ ! -z ${1+x} ]; then
		echo -e "${GREEN}隊伍人數上限改為 $1 ${NC}"
        mcdo scoreboard players set @e[tag=N] team_max $1
    fi
}

#=================================
otglist() {
	mcdo otg biome -f
	mcdo otg biome -s
	mcdo otg biome -d
	mcdo otg biome -m
}

#=================================
molemode() {
    if [ -z "$moleMode" ]; then
        moleMode=1; export moleMode
        echo -e ${YELLOW}moleMode on, time 30${NC}
        mcdo scoreboard objectives add moleMode dummy
        mcdo scoreboard players set @e[tag=N] moleMode 1
        mcdo scoreboard objectives add moleTime dummy
        mcdo scoreboard players set @e[tag=N] moleTime 30
    else
        unset moleMode
        echo -e ${GREEN}moleMode off${NC}
        mcdo scoreboard players set @e[tag=N] moleMode 0
    fi
}

#=================================
# time_reminder=1         //時間提醒
# time_shown=1            //名條顯示
# time_game=0             //時間停止(程式內部外加112秒)
# time_shrink=1           //漸縮/傳送/控制開始
# time_shrink_duration=1  //漸縮時間長度
# time_nomob=1            //清除怪物
# time_total=1            //最後戰場
# pvpTime=1               //PvP開啟時間
# moleTime=1              //選間諜時間
uhctime() {
	[ ! $1 ] && return
	
	time_total=$1

	time_reminder=$(echo $time_total/3 | bc | awk '{print ($0-int($0)<0.499)?int($0):int($0)+1}' | awk '{print ($0<2)?1:$0}' | awk '{print ($0>20)?20:$0}')
	time_shown=$(echo $time_total/3 | bc | awk '{print ($0-int($0)<0.499)?int($0):int($0)+1}')
	# 60*2/3 - 0.03(112sec)
	time_game=$(echo $time_total*.67-112/60 | bc | awk '{print ($0-int($0)<0.499)?int($0):int($0)+1}' | awk '{print ($0<0)?0:$0}')
	# 60*2/3
	time_shrink_duration=$(echo $time_total*.67 | bc | awk '{print ($0-int($0)<0.499)?int($0):int($0)+1}' | awk '{print ($0<1)?1:$0}')
	# 60/3 - 5
	time_shrink=$(echo $time_total*.25 | bc | awk '{print ($0-int($0)<0.499)?int($0):int($0)+1}')
	time_nomob=$(($time_shrink+$time_shrink_duration))
	pvpTime=$time_shown
	moleTime=$(($time_total/2))

	echo $time_reminder 時間提醒間隔
	echo $time_shrink 地圖漸縮/傳送/控制開始
	echo $time_shown 名條顯示
	echo $pvpTime PvP開啟時間
	echo $moleTime 選間諜時間
	echo $time_game 時間停止
	echo $(($time_shrink+$time_shrink_duration)) 地圖漸縮停止
	echo $time_nomob 玩家發光/清除怪物
	echo $time_total 最後戰場
	
	uhc_nset 'u' $time_reminder
	uhc_nset 'b' $time_shrink
	uhc_nset 'j' $time_shown
	uhc_nset 'pvpTime' $pvpTime
	uhc_nset 'moleTime' $moleTime
	uhc_nset 'g' $time_game
	uhc_nset 'e' $time_shrink_duration
	uhc_nset 'l' $time_nomob
	uhc_nset 'ClearTime' $time_nomob
	uhc_nset 'FinalTime' $time_total
}

#=================================
# moletime() {
    # echo moletime 
    # [ ! -z "$1" ] && mcdo scoreboard players set @e[tag=N] moleTime $1
# }

#=================================
uhc_nset() {
    # echo @e[tag=N] $1=$2 
    [ ! -z "$1" ] && mcdo scoreboard players set @e[tag=N] $1 $2
}

#=================================
log_parse_seed() {
    [ ! -f "$1" ] && return
    # logfile=$(pwd)/teams.log
    logfile=$(dirname $(readlink -e $1))/teams.log
    tmp=/tmp/teams.log
    rm $tmp
    cat $1 | grep 'Seed:' | awk '{ printf ("%s\n", $5) }' >>$tmp
    cat $1 | grep 'Seed:' | awk '{ printf ("%s\n", $11) }' >>$tmp
    file.replace.escape $tmp
    cat $tmp | grep -v start | sed "s/)//g" | sed '/^\s*$/d' | sort | uniq >$logfile
    
    cat $logfile
}

#=================================
log_parse_teams() {
    [ ! -f "$1" ] && return
    # logfile=$(pwd)/teams.log
    logfile=$(dirname $(readlink -e $1))/teams.log
    tmp=/tmp/teams.log
    cat $1 | egrep '\[*隊\]' | awk '{ printf ("  * %s\n", $4) }' >$tmp
    file.replace.escape $tmp
    cat $tmp >$logfile
    
    cat $logfile
}

#=================================
log_parse_slain() {
    [ ! -f "$1" ] && return
    logfile=/tmp/slain.log
    # logfile2=$(pwd)/slain.log
    logfile2=$(dirname $(readlink -e $1))/slain.log
    rm $logfile2
    cat $1 | grep.slain | remove_ansi_color | grep -v DiscordSRV | sed 's/^/  * /'  >$logfile
    file.cleanup $logfile
    file.replace.escape $logfile
    file.replace.teamtag $logfile
    [ -z "$2" ] && cat $logfile >$logfile2
    [ -z "$2" ] && echo >>$logfile2
    file.replace.cause $logfile
    file.replace.mob $logfile
    cat $logfile >>$logfile2
    
    cat $logfile2
}

#=================================
log_parse_winner() {
    [ ! -f "$1" ] && return
    # logfile=$(pwd)/winner.log
    logfile=$(dirname $(readlink -e $1))/winner.log
    tmp=/tmp/winner.log
    rm $tmp
    echo ================================= >>$tmp
    winner=$(cat $1 | grep 最後贏家 | tail -n 1 | awk '{ printf ("%s\n", $4) }' | sed "s/最後贏家是//g")
    if [ ! -z "$winner" ]; then
		echo 最後贏家 $winner >>$tmp
	fi
    cat $1 | grep '\[0;30;1' | egrep 'm([0-9]+,|=)' | awk '{ printf ("%s %s\n",$4,$5) }' >>$tmp
    file.replace.escape $tmp
    cat $tmp >$logfile
    
    cat $logfile
}

#=================================
log_parse_cheater() {
    [ ! -f "$1" ] && return
    # logfile=$(pwd)/cheat.log
    logfile=$(dirname $(readlink -e $1))/cheat.log
    rm $logfile
	
    cat $1 | grep 'BLOCKBREAK_\|BLOCKPLACE_\|CHAT_\|COMBINED_\|FIGHT_\|BLOCKINTERACT_\|INVENTORY_\|MOVING_\|NET_' | sort >>$logfile
    
    cat $logfile
}

#=================================
list_top() {
    grep -A 10 $1 | tail -n +2 | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' ' {
      # if (!top||$1==top) {
      if (!top) {
        printf("%s\t%s\n",$1,$2)
        top=$1
      }
    } '
}

list_top_by() {
    grep -A 60 $1 | grep $2 | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' ' {
      if (!top||$1==top) {
        printf("%s\t%s\n",$1,$2)
        top=$1
      }
    } '
}

#=================================
log_parse_tops() {
    [ ! -f "$1" ] && return
    winner=$(cat $1 | remove_ansi_color | grep 最後贏家 | tail -n 1 | awk '{ printf ("%s\n", $4) }' | sed "s/最後贏家是//g")
    if [ ! -z "$winner" ]; then
		winteamnames=$(cat $1 | list_team | grep -w $winner | cut -d "[" -f2 | cut -d "]" -f1 | sort | uniq)
		for winteamname in $winteamnames
		do
			winteamplayer=$(cat $1 | list_team | grep $winteamname | sed 's/\[[^]]*\]//g' | sed 's/(間諜)//g' | sort | uniq | tr '\r' ' ' | tr '\n' ' ' | sed 's/  / /g'| sed "s/\<$winner\>/\*\*$winner\*\*/g")
			winteamplayer=$(cat $1 | list_team | grep $winteamname | sed 's/\[[^]]*\]//g' | sort | uniq | tr '\r' ' ' | tr '\n' ' ' | sed 's/  / /g'| sed "s/\<$winner\>/\*\*$winner\*\*/g")
			echo "  * 最後贏家: [$winteamname]$winteamplayer"
		done
	fi
    kill=$(cat $1|list_top FinalKill|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    kill_count=$(cat $1|list_top FinalKill|list_count)
    [ ! -z "$kill" ] && [ "$kill" != "殺怪數 " ] && echo "  * 殺人王: $kill''$kill_count人''"
    mobs=$(cat $1|list_top FinalEntity|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    mobs_count=$(cat $1|list_top FinalEntity|list_count)
    [ ! -z "$mobs" ] && [ "$mobs" != "挖掘鑽石礦 " ] && echo "  * 鬼見愁: $mobs''$mobs_count隻怪''"
    diamond=$(cat $1|list_top FinalDiamond|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    diamond_count=$(cat $1|list_top FinalDiamond|list_count)
    if [ ! -z "$diamond" ] && [ "$diamond" != "挖掘黃金礦 " ]; then
		rock_count=$(cat $1|list_top_by FinalStone $diamond|list_count)
		ratio=$(echo "scale=2;100*$diamond_count/$rock_count"|bc|awk '{printf "%.2f", $0}')
		echo "  * 幸運星: $diamond''$diamond_count顆鑽石(礦石比$diamond_count/$rock_count=$ratio%)''"
	fi
    apple=$(cat $1|list_top FinalEat|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    apple_count=$(cat $1|list_top FinalEat|list_count)
    [ ! -z "$apple" ] && [[ "$apple" != "遊戲結束"* ]] && echo "  * 金好命: $apple''$apple_count顆金蘋果''"
}

#=================================
log_diamond() {
	echo "小葉指數:"
	# names=$(cat $1|grep "\[FinalDiamond\]" | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' '{printf("%s\n",$2)}')
	# for name in $names; do
		# diamond_count=$(cat $1|list_top_byV2 FinalDiamond $name|list_count)
		# if [ ! -z "$name" ]; then
			# rock_count=$(cat $1|list_top_byV2 FinalStone $name|list_count)
			# ratio=$(echo "scale=2;100*$diamond_count/$rock_count"|bc|awk '{printf "%.2f", $0}')
			# echo "  * $name: $diamond_count顆鑽石(礦石比$diamond_count/$rock_count=**$ratio%**)"
		# fi
	# done
	names=$(cat $1|grep -A 12 FinalDiamond | tail -n +2 | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' '{printf("%s\t%s\n",$1,$2)}'|list_name)
	# echo $(cat $1|grep -A 10 FinalDiamond | tail -n +2)
	for name in $names; do
		# echo name=$name
		diamond_count=$(cat $1|grep -A 12 FinalDiamond | grep $name | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' '{printf("%s\t%s\n",$1,$2)}'|head -n 1|list_count)
		# echo diamond_count=$diamond_count
		if [ ! -z "$diamond_count" ]; then
			rock_count=$(cat $1|grep -A 60 FinalStone | grep $name | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' '{printf("%s\n",$1)}'|head -n 1|list_count)
			# echo rock_count=$rock_count
			re='^[0-9]+$'
			if [[ $diamond_count =~ $re ]]; then
				ratio=$(echo "scale=2;100*$diamond_count/$rock_count"|bc|awk '{printf "%.2f", $0}')
				# echo ratio=$ratio
				echo "  * $name: $diamond_count顆鑽石(礦石比$diamond_count/$rock_count=**$ratio%**)"
			fi
		fi
	done
	
}

#=================================
list_topV2() {
    # grep -A 10 $1 | tail -n +2 | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' ' {
      # if (!top||$1==top) {
        # printf("%s\t%s\n",$1,$2)
        # top=$1
      # }
    # } '
	# echo grep "[$1]"
	grep "\[$1\]" | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' ' {
      if (!top||$1==top) {
        printf("%s\t%s\n",$1,$2)
        top=$1
      }
    } '
}

list_top_byV2() {
    grep "\[$1\]" | grep $2 | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' ' {
      if (!top||$1==top) {
        printf("%s\t%s\n",$1,$2)
        top=$1
      }
    } '
}

#=================================
log_parse_topsV2() {
    [ ! -f "$1" ] && return
    winner=$(cat $1 | remove_ansi_color | grep 最後贏家 | tail -n 1 | awk '{ printf ("%s\n", $4) }' | sed "s/最後贏家是//g")
    if [ ! -z "$winner" ]; then
		winteamnames=$(cat $1 | list_team | grep -w $winner | cut -d "[" -f2 | cut -d "]" -f1 | sort | uniq)
		for winteamname in $winteamnames
		do
			winteamplayer=$(cat $1 | list_team | grep $winteamname | sed 's/\[[^]]*\]//g' | sed 's/(間諜)//g' | sort | uniq | tr '\r' ' ' | tr '\n' ' ' | sed 's/  / /g'| sed "s/\<$winner\>/\*\*$winner\*\*/g")
			winteamplayer=$(cat $1 | list_team | grep $winteamname | sed 's/\[[^]]*\]//g' | sort | uniq | tr '\r' ' ' | tr '\n' ' ' | sed 's/  / /g'| sed "s/\<$winner\>/\*\*$winner\*\*/g")
			echo "  * 最後贏家: [$winteamname]$winteamplayer"
		done
	fi
    kill=$(cat $1|list_topV2 FinalKill|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    kill_count=$(cat $1|list_topV2 FinalKill|list_count)
    [ ! -z "$kill" ] && echo "  * 殺人王: $kill''$kill_count人''"
    mobs=$(cat $1|list_topV2 FinalEntity|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    mobs_count=$(cat $1|list_topV2 FinalEntity|list_count)
    [ ! -z "$mobs" ] && echo "  * 鬼見愁: $mobs''$mobs_count隻怪''"
    diamond=$(cat $1|list_topV2 FinalDiamond|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    diamond_count=$(cat $1|list_topV2 FinalDiamond|list_count)
    if [ ! -z "$diamond" ]; then
		rock_count=$(cat $1|list_top_byV2 FinalStone $diamond|list_count)
		ratio=$(echo "scale=2;100*$diamond_count/$rock_count"|bc|awk '{printf "%.2f", $0}')
		echo "  * 幸運星: $diamond''$diamond_count顆鑽石(礦石比$diamond_count/$rock_count=$ratio%)''"
	fi
    apple=$(cat $1|list_topV2 FinalEat|list_name|tr '\r' ' '|tr '\n' ' '|sed 's/  / /g')
    apple_count=$(cat $1|list_topV2 FinalEat|list_count)
    [ ! -z "$apple" ] && echo "  * 金好命: $apple''$apple_count顆金蘋果''"
}

#=================================
log_diamondV2() {
	echo "小葉指數:"
	names=$(cat $1|grep "\[FinalDiamond\]" | remove_ansi_color | sed 's/\[[^]]*\]//g' | sed "s/://g" | awk -F',' '{printf("%s\n",$2)}')
	for name in $names; do
		# echo name=$name
		diamond_count=$(cat $1|list_top_byV2 FinalDiamond $name|list_count)
		# echo diamond_count=$diamond_count
		if [ ! -z "$name" ]; then
			rock_count=$(cat $1|list_top_byV2 FinalStone $name|list_count)
			# echo rock_count=$rock_count
			ratio=$(echo "scale=2;100*$diamond_count/$rock_count"|bc|awk '{printf "%.2f", $0}')
			# echo ratio=$ratio
			echo "  * $name: $diamond_count顆鑽石(礦石比$diamond_count/$rock_count=**$ratio%**)"
		fi
	done
}

#=================================
second_diff() {
# Convert the times to seconds from the Epoch
SEC1=`date +%s -d ${1}`
SEC2=`date +%s -d ${2}`

# Use expr to do the math, let's say TIME1 was the start and TIME2 was the finish
DIFFSEC=`expr ${SEC2} - ${SEC1}`

# echo Start ${1}
# echo Finish ${2}

# echo Took ${DIFFSEC} seconds.

# And use date to convert the seconds back to something more meaningful
# echo Took `date +%H:%M:%S -ud @${DIFFSEC}`

echo ${DIFFSEC}
}

log_parse_lag() {
    [ ! -f "$1" ] && return
    # logfile=$(pwd)/lag.log
    logfile=$(dirname $(readlink -e $1))/lag.log
    tmpfile=/tmp/lag.tmp
    delayLimitms=1000
    rm $logfile $tmpfile
    cat $1 | grep.lag >$tmpfile
	if [ -s $tmpfile ]; then
		totalms=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sed '/^\s*$/d' | paste -sd+ - | bc)
		totaltick=$(cat $tmpfile | awk '{ printf ("%s\n", $21) }' | sed '/^\s*$/d' | paste -sd+ - | bc)
		TIME1=$(cat $1 | head -n 1 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
		TIME2=$(cat $1 | tail -n 1 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
		sec=$(second_diff $TIME1 $TIME2)
		per=$(echo "scale=2;100*$totalms/1000/$sec" | bc -l)
		max=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | head -n 1)
		# tops=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | head -n 20)
		tops=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | sed '/^\s*$/d' | sed 's/[^0-9]*//g' | awk '$1>'"$delayLimitms")
		count=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sed '/^\s*$/d' | sort -nr | wc -l)
		avg=$(echo "scale=0;$totalms/$count" | bc -l)
		# echo ================================= >>$logfile
		echo Running total ${totalms}ms behind, skipping ${totaltick} tick\(s\), ${totalms}ms/${sec}sec=${per}%, with ${count} times, max delay is ${max}ms. avg delay is ${avg}ms. >>$logfile
		echo [$TIME1] to [$TIME2] for `date +%H:%M:%S -ud @${sec}` >$tmpfile
		gamestart=$(cat $1 | grep '傳送倒數計時\|lost the achievement' | head -n 1 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
		for top in $tops; do
			delaytimes=$(cat $1 | grep ${top}ms | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
			for delaytime in $delaytimes; do
				gametime=$(second_diff $gamestart $delaytime)
				echo [${delaytime}] `date +%H:%M:%S -ud @${gametime}` - Lag ${top}ms >>$tmpfile
			done
		done
		
		delaytime=$(cat $1 | grep 'max 0.05' | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
		if [ ! -z "$delaytime" ]; then
			gametime=$(second_diff $gamestart $delaytime)
			gametimeH=$(date +%H:%M:%S -ud @${gametime})
			cat $1 | grep 'max 0.05' | awk -v gt="$gametimeH" '{printf ("%s %s - Shutdown %s%s\n",$1,gt,$9,$10) }' >>$tmpfile
		fi
	fi
    
    cat $1 | grep Timings >>$tmpfile
    
    cat $1 | grep 物品！ | grep -v 清除0個 >>$tmpfile
    cat $tmpfile | sort >>$logfile
    
    cat $logfile
}

#=================================
num2roman() { # NUM
# Returns NUM in roman letters
#
    input=$1	# input num
    output=""	# Clear output string
    len=${#input}	# Initial length to count down
    
    roman_val() { # NUM one five ten
    # This sub does the basic 'roman' algorythm
    #
        N=$1
        one=$2
        five=$3
        ten=$4
        out=""
        
        case $N in
        0)	out+=""	;;
        [123])	while [[ $N -gt 0 ]]
            do	out+="$one"
                N=$(($N-1))
            done
            ;;
        4)	out+="$one$five"	;;
        5)	out+="$five"	;;
        [678])	out+="$five"
            N=$(($N-5))
            while [[ $N -gt 0 ]]
            do	out+="$one"
                N=$(($N-1))
            done
            ;;
        9)	while [[ $N -lt 10 ]]
            do	out+="$one"
                N=$(($N+1))
            done
            out+="$ten"
            ;;
        esac
        echo $out
    }
    
    while [[ $len -gt 0  ]]
    do	# There are letters to add
        num=${input:0:1}
        # Do action according position
        case $len in
        1)	# 1
            output+="$(roman_val $num I V X)"
            ;;
        2)	# 10
            output+="$(roman_val $num X L C)"
            ;;
        3)	# 100
            output+="$(roman_val $num C D M)"
            ;;
        *)	# 1000+
            # 10'000 gets a line above, 100'000 gets a line on the left.. how to?
            num=${input:0:(-3)}
            while [[ $num -gt 0 ]]
            do	output+="M"
                num=$(($num-1))
            done
            
            ;;
        esac
        input=${input:1} ; len=${#input}
    done
    echo $output
}

list_name() {
    awk '{printf("%s ",$2)}'
}

list_count() {
    awk '{printf("%s\n",$1)}' | uniq
}

list_team() {
    remove_ansi_color | egrep '\[*隊\]' | awk '{ printf ("%s\n", $4) }'
}

log_parse_uhc() {
	uhctitle_byfile $*
    echo 感言:\\\\
    echo 生物群系:\\\\
    echo $(cat $1 | remove_ansi_color | grep 中心點 | tail -n 1 | awk '{ printf ("%s %s %s\n",$4,$5,$6) }')
    echo \\\\
    echo 種子碼:
    log_parse_seed $*
    echo \\\\
    echo 下次賽後賽:\\\\
    echo \\\\
    echo 影片:\\\\
    echo 參賽名單:
    log_parse_teams $*
    echo 戰敗順序:
    log_parse_slain $* false
    echo 頭銜:
	log_parse_tops $*
	log_diamond $*
    echo 
    log_parse_winner $*
    echo Lag:
    log_parse_lag $*
    echo Cheaters:
    log_parse_cheater $*
    echo 紀錄檔: $(readlink -e $1)
}

log_parse_uhcV2() {
	uhctitle_byfile $*
    echo 感言:\\\\
    echo 生物群系:\\\\
    echo $(cat $1 | remove_ansi_color | grep 中心點 | tail -n 1 | awk '{ printf ("%s %s %s\n",$4,$5,$6) }')
    echo \\\\
    echo 種子碼:
    log_parse_seed $*
    echo \\\\
    echo 下次賽後賽:\\\\
    echo \\\\
    echo 影片:\\\\
    echo 參賽名單:
    log_parse_teams $*
    echo 戰敗順序:
    log_parse_slain $* false
    echo 頭銜:
	log_parse_topsV2 $*
	log_diamondV2 $*
    echo 
    log_parse_winner $*
    echo Lag:
    log_parse_lag $*
    echo Cheaters:
    log_parse_cheater $*
    echo 紀錄檔: $(readlink -e $1)
}

#=================================
# help_hline1 'UHC地圖設定'
help_add 'uhctitle' 'UHC標題'
alias uhctitle=uhctitle
# help_add 'ruleinit' 'UHC初始'
alias ruleinit=uhcinit
# help_add 'ruleset' 'UHC設定規則'
alias ruleset='/home/sita/script/minecraft/uhc.rules $*'
# help_add 'ruleset2' 'UHC跑圖'
alias ruleset2=uhcset2
# help_add 'ruleotg' 'OTG地圖'
alias ruleotg='otglist'
# alias uhcstart='/home/sita/script/minecraft/uhc.start'
# alias uhcend='/home/sita/script/minecraft/uhc.end'

#=================================
help_hline2 '記分板'

help_add 'teams.[team]' '列出隊伍名稱/隊伍內玩家'
alias teams='mcdo scoreboard teams list'
help_add 'obj' '列出變數'
alias obj='mcdo scoreboard objectives list'
help_add 'players.[player]' '列出玩家/玩家目標'
alias players='mcdo scoreboard players list'
help_add 'tag.<player>' '列出玩家標籤'
alias tag='playertaglist $*'

#=================================
help_hline1 '隊伍/UHC分隊'
help_add 'ti' '隊伍和玩家清單'
alias ti='teams && uhcteams && list'
help_add 'tj.<team>.<id>' '隊伍加入玩家'
alias tj='mcdo scoreboard teams join $1 $2'
# help_add 'uhcjoin.<team>.<id>' 'UHC加入隊伍'
# alias uhcjoin='uhcteams && onlineplayerlist && mcdo scoreboard teams join $1 $2'
# help_add 'ui' 'UHC隊伍和玩家清單'
# alias ui='uhcteams && list'
# help_add 'list' '列出線上玩家名稱'
alias list='list_players'
help_add 'uj.[on]' 'UHC關閉/開啟加入隊伍權限'
alias uj='uhcteamchoice $*'
help_add 'um.<num>' 'UHC隊伍人數上限'
alias um='uhcteammax $*'
help_add 'ur' 'UHC隨機分隊'
alias ur='uhcteamcreate $*'
alias uhcselect='/home/sita/script/minecraft/uhc.team.select $*'
help_add 'uc' 'UHC取消全部隊伍/全部未分隊'
alias uc='mcserver do scoreboard teams join 1 @a'

#=================================
alias mcsb='mcscores 3' #UHC排行榜間隔3秒
# alias mcsbs='mcscores $*'
alias mcwb='mcdo worldborder $*' #設定世界邊界
alias mcwb0='mcdo worldborder set 60000000' #設定世界邊界60000000
alias mcff='team_all_set friendlyfire true' #同隊傷害
alias mcfff='team_all_set friendlyfire false' #同隊傷害關閉

help_hline1 'UHC控制'

help_add 'ut.<minutes>' 'UHC設定時間'
alias ut='mcdo scoreboard players set @e[tag=N] minute $*'
help_add 'ush' 'UHC開始縮地圖'
alias ush='mcdo scoreboard players set @e[tag=N] b 0'
# help_add 'uhcfinal' 'UHC最後決戰'
# alias uhcfinal='mcdo scoreboard players set @e[tag=N] FinalTime 0'
help_add 'uf.<ticks>' 'UHC最後戰場倒數'
alias uf='mcdo scoreboard players set @e[tag=N] FinalWar $*'
help_add 'uhcmole' 'UHC間諜模式On/Off'
alias uhcmole='molemode'
help_add 'uhctime.<minutes>' 'UHC時間長度'
alias uhctime='uhctime'
# help_add 'moletime.<minutes>' 'UHC間諜模式時間設定'
# alias moletime='moletime'
help_add 'nset.<value>' 'UHC變數設定'
alias nset='uhc_nset'
help_add 'uhcp' 'UHC.profiler.On/Off'
alias uhcp='mcdo run p'
help_add 'uhce' 'UHC.eventHandler.On/Off'
alias uhce='mcdo run e'

#=================================
help_hline1 'UHC紀錄分析'
# alias uhcstat=uhcstat
# help_add 'logteams.<log>' 'UHC分析參賽名單'
alias logteams='log_parse_teams $*'
# help_add 'logslain.<log>' 'UHC分析殺人紀錄'
alias logslain='log_parse_slain $*'
# help_add 'logwinner.<log>' 'UHC分析贏家'
alias logwinner='log_parse_winner $*'
# help_add 'loglag.<log>' 'UHC分析延遲'
alias loglag='log_parse_lag $*'
# help_add 'loglag.<log>' 'UHC分析作弊'
alias logcheat='log_parse_cheater $*'
help_add 'loguhc.<log>' 'UHC賽後分析'
alias loguhc0='log_parse_uhc $*'
alias loguhc='log_parse_uhcV2 $*'
