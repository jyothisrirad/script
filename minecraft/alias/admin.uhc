#!/bin/bash

#=================================
help_hline3 'UHC'

#=================================
# $1: default to wait for key press for each score
#     <num> to sleep <num> sec between each score
mcscores() {
	# echo $1 $2
	while : ; do
		mcserver do scoreboard objectives setdisplay sidebar FinalKill
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalEntity
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalDiamond
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalGold
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalStone
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar FinalEat
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
		mcserver do scoreboard objectives setdisplay sidebar List
		[[ $2 == 'forever' ]] || break
		if [ -z ${1+x} ]; then pause; else sleep $1; fi
	done
}


#=================================
# friendlyfireSet() {
	# for t in R Y G A B P E r y g a b p e
	# do 
		# mcserver do scoreboard teams option $t friendlyfire $1
	# done
# }


#=================================
team_all_set() {
	# for t in R Y G A B P E r y g a b p e 0 1
	for t in R Y G A B P E r y g a b p e
	do 
		mcserver do scoreboard teams option $t $1 $2
	done
}

#=================================
# aqua() { 
	# echo A 
# }

#=================================
uhclist() {
	# echo 隊伍ID列表
	# echo Solo=1
	# echo Spectate=0
	# echo Red=R
	# echo Yellow=Y
	# echo Green=G
	# echo Aqua=A
	# echo Blue=B
	# echo Light Purple=P
	# echo Gray=E
	# echo Dark Red=r
	# echo Gold=y
	# echo Dark Green=g
	# echo Dark Aqua=a
	# echo Dark Blue=b
	# echo Dark Purple=p
	# echo Dark Gray=e
	echo 隊伍ID:__[1]單人[0]旁觀者
	echo [R]紅隊__[Y]黃隊[G]綠隊__[A]青隊__[B]藍隊__[P]亮紫隊[E]灰隊
	echo [r]深紅隊[y]橘隊[g]深綠隊[a]深青隊[b]深藍隊[p]深紫隊[e]深灰隊
}

#=================================
# playerlist() {
	# echo 玩家ID:
	# mcdo list | grep.player
# }

#=================================
uhcstat() {
	LOG=/mnt/runtimes/$mcver/logs/list.log
	if [ -f "$LOG" ]; then 
		echo 上線名單:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/teams.log
	if [ -f "$LOG" ]; then 
		echo 參賽名單:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/slain.log
	if [ -f "$LOG" ]; then 
		echo 戰敗順序:
		cat $LOG
	fi
	LOG=/mnt/runtimes/$mcver/logs/winner.log
	if [ -f "$LOG" ]; then 
		echo 最後贏家:
		cat $LOG
	fi
}

#=================================
uhcinit() {
	mcdo time set 0
	# mcdo tp @a 9475 65 3420
	mcdo op chsliu
	mcdo op creeper_arena
	mcdo gamemode 1 @a
	mcdo replaceitem entity @a slot.hotbar.7 command_block
	mcdo replaceitem entity @a slot.hotbar.8 redstone_block
}

#=================================
uhcteamcreate() {
	tmpscrpit=/tmp/teamcreate
	# echo . /home/sita/script/minecraft/alias.minecraft >$tmpscrpit
	# mcdo list | grep.player | team.select >>$tmpscrpit
	mcdo list | grep.player | /home/sita/script/minecraft/uhc.team.select >>$tmpscrpit
	cat $tmpscrpit
	mcdo gamerule sendCommandFeedback false
	. $tmpscrpit
	rm $tmpscrpit
}

#=================================
uhcteamchoice() {
	if [ ! -z ${1+x} ]; then 
		echo -e "${GREEN}加入隊伍權限On${NC}"
		mcdo scoreboard players set @e[tag=F] J 0	#加入隊伍權限Off
		mcdo scoreboard players set @e[tag=N] J 1	#加入隊伍權限On
	else
		echo -e "${YELLOW}加入隊伍權限Off${NC}"
		mcdo scoreboard players set @e[tag=F] J 1	#加入隊伍權限Off
		mcdo scoreboard players set @e[tag=N] J 0	#加入隊伍權限On
	fi
}

#=================================
otglist() {
	mcdo otg biome -f
	mcdo otg biome -s
	mcdo otg biome -d
	mcdo otg biome -m
}

#=================================
log_parse_teams() {
    [ ! -f "$1" ] && return
    logfile=$(pwd)/teams.log
    tmp=/tmp/teams.log
    cat $1 | egrep '\[*隊\]' | awk '{ printf ("%s\n", $4) }' >$tmp
    file.replace.escape $tmp
    cat $tmp >$logfile
    
    cat $logfile
}

#=================================
log_parse_slain() {
    [ ! -f "$1" ] && return
    logfile=/tmp/slain.log
    logfile2=$(pwd)/slain.log
    cat $1 | grep.slain | grep -v DiscordSRV >$logfile
    file.cleanup $logfile
    file.replace.escape $logfile
    file.replace.teamtag $logfile
    cat $logfile >$logfile2
    echo >>$logfile2
    file.replace.cause $logfile
    file.replace.mob $logfile
    cat $logfile >>$logfile2
    
    cat $logfile2
}

#=================================
log_parse_winner() {
    [ ! -f "$1" ] && return
    logfile=$(pwd)/winner.log
    tmp=/tmp/winner.log
    cat $1 | grep '\[0;30;1' | egrep 'm([0-9]+,|=)' | awk '{ printf ("%s %s\n",$4,$5) }' >$tmp
    winner=$(cat $1 | grep 最後贏家 | tail -n 1 | awk '{ printf ("%s\n", $4) }' | sed "s/最後贏家是//g")
    echo ================================= >>$tmp
    echo 最後贏家 $winner >>$tmp
    file.replace.escape $tmp
    cat $tmp >$logfile
    
    cat $logfile
}

#=================================
second_diff() {
# Convert the times to seconds from the Epoch
SEC1=`date +%s -d ${1}`
SEC2=`date +%s -d ${2}`

# Use expr to do the math, let's say TIME1 was the start and TIME2 was the finish
DIFFSEC=`expr ${SEC2} - ${SEC1}`

# echo Start ${1}
# echo Finish ${2}

# echo Took ${DIFFSEC} seconds.

# And use date to convert the seconds back to something more meaningful
# echo Took `date +%H:%M:%S -ud @${DIFFSEC}`

echo ${DIFFSEC}
}

log_parse_lag() {
    [ ! -f "$1" ] && return
    logfile=$(pwd)/lag.log
    tmpfile=$(pwd)/lag.tmp
    delayLimitms=5000
    rm $logfile
    cat $1 | grep.lag >$tmpfile
    totalms=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sed '/^\s*$/d' | paste -sd+ - | bc)
    totaltick=$(cat $tmpfile | awk '{ printf ("%s\n", $21) }' | sed '/^\s*$/d' | paste -sd+ - | bc)
    TIME1=$(cat $1 | head -n 1 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
    TIME2=$(cat $1 | tail -n 1 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
    sec=$(second_diff $TIME1 $TIME2)
    per=$(echo "scale=2;100*$totalms/1000/$sec" | bc -l)
    max=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | head -n 1)
    # tops=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | head -n 20)
    tops=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sort -nr | sed '/^\s*$/d' | sed 's/[^0-9]*//g' | awk '$1>'"$delayLimitms")
    count=$(cat $tmpfile | awk '{ printf ("%s\n", $18) }' | sed "s/ms//g" | sed '/^\s*$/d' | sort -nr | wc -l)
    avg=$(echo "scale=0;$totalms/$count" | bc -l)
    # echo ================================= >>$logfile
    echo Running total ${totalms}ms behind, skipping ${totaltick} tick\(s\), ${totalms}ms/${sec}sec=${per}%, with ${count} times, max delay is ${max}ms. avg delay is ${avg}ms. >>$logfile
    echo [$TIME1] to [$TIME2] for `date +%H:%M:%S -ud @${sec}` >$tmpfile
    gamestart=$(cat $1 | grep 傳送倒數計時 | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
    for top in $tops; do
        delaytimes=$(cat $1 | grep ${top}ms | awk '{ printf ("%s\n", $1) }' | sed "s/\[//g" | sed "s/\]//g")
        for delaytime in $delaytimes; do
            gametime=$(second_diff $gamestart $delaytime)
            echo [${delaytime}] `date +%H:%M:%S -ud @${gametime}` - Lag ${top}ms>>$tmpfile
        done
    done
    cat $1 | grep 物品！ >>$tmpfile
    cat $tmpfile | sort >>$logfile
    
    cat $logfile
}

#=================================
log_parse_uhc() {
    log_parse_teams $*
    log_parse_slain $*
    log_parse_winner $*
    log_parse_lag $*
}

#=================================
alias mcsb='mcscores 3' #UHC排行榜間隔3秒
# alias mcsbs='mcscores $*'
alias mcwb='mcdo worldborder $*' #設定世界邊界
alias mcwb0='mcdo worldborder set 60000000' #設定世界邊界60000000
alias mcff='team_all_set friendlyfire true' #同隊傷害
alias mcfff='team_all_set friendlyfire false' #同隊傷害關閉

#=================================
help_hline2 '隊伍'

help_add 'teamlist' '列出隊伍名稱'
help_add 'teamlist.<team>' '列出隊伍team內玩家'
alias teamlist='mcdo scoreboard teams list'
help_add 'playerlist' '列出線上玩家名稱'
alias playerlist='echo 玩家ID: && mcdo list | grep.player | sort'
help_add 'teamjoin.<team>.<id>' '加入隊伍'
alias teamjoin='teamlist && playerlist && mcdo scoreboard teams join $1 $2'

#=================================
help_hline1 'UHC地圖設定'
help_add 'ruleinit' 'UHC初始'
alias ruleinit=uhcinit
help_add 'ruleset' 'UHC設定規則'
alias ruleset='/home/sita/script/minecraft/uhc.rules $*'
help_add 'ruleotg' 'OTG地圖'
alias ruleotg='otglist'
# alias uhcstart='/home/sita/script/minecraft/uhc.start'
# alias uhcend='/home/sita/script/minecraft/uhc.end'

#=================================
help_hline1 'UHC遊戲中'
help_add 'uhclist' 'UHC列出team名稱'
alias uhcstat=uhcstat
alias uhcselect='/home/sita/script/minecraft/uhc.team.select $*'
help_add 'uhccreate' 'UHC隨機分隊'
alias uhccreate=uhcteamcreate
help_add 'uhcjoin.<team>.<id>' 'UHC加入隊伍'
alias uhcjoin='uhclist && playerlist && mcdo scoreboard teams join $1 $2'
help_add 'uhcsolo.<id>' 'UHC加入單人隊伍'
alias uhcsolo='mcserver do scoreboard teams join 1 @a'
help_add 'uhcchoice' 'UHC開啟加入隊伍權限'
alias uhcchoice='uhcteamchoice $*'

help_hline1 'UHC控制'

help_add 'uhctime.<minutes>' 'UHC設定時間'
alias uhctime='mcdo scoreboard players set @e[tag=N] minute $*'
help_add 'uhcshrink' 'UHC開始縮地圖'
alias uhcshrink='mcdo scoreboard players set @e[tag=N] b 0'
# help_add 'uhcfinal' 'UHC最後決戰'
# alias uhcfinal='mcdo scoreboard players set @e[tag=N] FinalTime 0'
help_add 'uhcfinal.<ticks>' 'UHC最後戰場倒數'
alias uhctime='mcdo scoreboard players set @e[tag=N] FinalWar $*'

#=================================
help_hline1 'UHC紀錄分析'
help_add 'logteams.<log>' 'UHC分析參賽名單'
alias logteams='log_parse_teams $*'
help_add 'logslain.<log>' 'UHC分析殺人紀錄'
alias logslain='log_parse_slain $*'
help_add 'logwinner.<log>' 'UHC分析贏家'
alias logwinner='log_parse_winner $*'
help_add 'loglag.<log>' 'UHC分析延遲'
alias loglag='log_parse_lag $*'
help_add 'loguhc.<log>' 'UHC賽後分析'
alias loguhc='log_parse_uhc $*'
