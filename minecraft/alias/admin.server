#!/bin/bash

#=================================
help_hline3 '伺服器管理(server)'

#=================================
server.prep() {
	# echo server.prep
    
    #save changed files to backup path
    SAVE=/mnt/runtimes/$mcver/save.sh
    [ -f $SAVE ] && . $SAVE
    
    #download files from backup path
    SYNC=/mnt/runtimes/$mcver/sync.sh
    [ -f $SYNC ] && . $SYNC
    
    #config server
	config=/mnt/runtimes/$mcver/config.sh
	[ ! -f $config ] || . $config

    #config server.properties
	properties=/mnt/runtimes/$mcver/server.properties
	[ ! $onlinemode ] 			|| echo online-mode=$onlinemode >> $properties
	[ ! $serverport ] 			|| echo server-port=$serverport >> $properties
	
    #config server.properties
	echo "$server_properties" >> $properties
}

#=================================
mcwaituntilready() {
	mcresult=/tmp/mcwaituntilready
	# echo ================
	mcserver status > $mcresult
	if ! filehas $mcresult 'not running'; then
		# echo 'running'
		for i in $(seq 1 100)       
		do
			mcserver do list > $mcresult
			if filehas $mcresult 'players'; then
				break
			fi
		done
	fi
	# cat $mcresult
	# echo ================
}

#=================================
rematch() {
	mcserver halt
	mcserver pre_restore
	mcserver restore $*
	# mcprep
	server.prep
	mcserver start
	# sleep 1
	# mclog
	# mcserver log $*
}

#=================================
lag_check() {
    timings_report
    ncp_report

    echo -e "${GREEN}=== $mcver lag ${NC}"
	logs | grep 'overloaded\|TPS has dropped\|free memory pool\|服務器\|Timings'

    echo ================
	~/script/init.d/hosts/$(hostname) lag
    
    echo ================
    echo $(cat /proc/cpuinfo | grep 'model name' | wc -l) cores
    cat /proc/cpuinfo | grep 'model name\|bogomips\|MHz\|cache size' | sort | uniq
    
    echo ================
    free -h
    
    echo ================
    df -h
    
    echo ================
}

#=================================
clag_check() {
    echo -e "${GREEN}=== $mcver clag ${NC}"
	logs | grep '服務器'
	~/script/init.d/hosts/$(hostname) clag
    free -h
}

#=================================
timings_report() {
    export LOG_DELAY=2
    mcdo timings paste
    export LOG_DELAY=.1
    # mcdo timings report
    mcdo timings merged
    # mcdo timings separate
}

#=================================
ncp_report() {
    mcdo ncp lag
    mcdo ncp log counters
	cheat_report
}

#=================================
cheat_report() {
    export LOG_DELAY=.4
	mcdo ncp top 10 Blockbreak
	mcdo ncp top 10 Blockplace
	mcdo ncp top 10 Chat
	mcdo ncp top 10 Combined
	mcdo ncp top 10 Fight
	mcdo ncp top 10 Blockinteract
	mcdo ncp top 10 Inventory
	mcdo ncp top 10 Moving
	mcdo ncp top 10 Net
    export LOG_DELAY=.1
}

#=================================
log_find() {
	echo -e ${GREEN}=== bungeeCord ===${NC}
	cat /mnt/runtimes/65-bungeeCord-azure/proxy.log.0 | grep -C 1 $*
	# ips=$(cat /mnt/runtimes/65-bungeeCord-azure/proxy.log.0 | grep -C 1 $* | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
	# echo -e ${RED}ip: ${ips}${NC}

	echo -e ${GREEN}=== $mcver ===${NC}
	cat /mnt/runtimes/$mcver/logs/latest.log | grep -C 3 $*
	
	ips=$(cat /mnt/runtimes/$mcver/logs/latest.log | grep -C 0 $* | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
	# echo -e ${RED}ip: ${ips}${NC}
	for ip in $ips
	do
		geo $ip
	done
}

#=================================
log_find_geo_mc() {
    # log=/mnt/runtimes/$mcver/logs/latest.log
    log=/mnt/runtimes/$mcver/logs/2018-06-18-6.log.gz

	# ips=$(cat $log | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
	ips=$(zcat $log | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
    geolines=()
	for ip in $ips
	do
		newip=$(geo $ip)
		names=$(zcat $log | grep $ip | grep -v banned | awk -F'[' '{ printf ("%s\n",$3) }' | awk -F':' '{ printf ("%s\n",$2) }' | sort | uniq)
		banned=$(zcat $log | grep $ip | grep banned | awk -F':' '{ printf ("%s %s\n",$6,$9) }' | sort | uniq)
        
        names=$(echo ${names}|tr -d '\n')
        banned=$(echo ${banned}|tr -d '\n')
        # echo $newip $banned $names
        printf "."
        [ -z "$banned" ] && geolines+=("${newip}: $names") || geolines+=("${newip}: $names | $banned")
	done
    printf "\n"
    
    IFS=$'\n' sorted=($(sort <<<"${geolines[*]}"))
    unset IFS
    
    printf "%s\n" "${sorted[@]}"
}

#=================================
log_find_geo_bc() {
    log=/mnt/runtimes/$mcver/proxy.log.0

	ips=$(cat $log | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort | uniq)
    geolines=()
	for ip in $ips
	do
        newip=$(geo $ip)
        # echo $newip
        geolines+=("$newip")
        printf "."
	done
    printf "\n"
    
    IFS=$'\n' sorted=($(sort <<<"${geolines[*]}"))
    unset IFS
    
    printf "%s\n" "${sorted[@]}"
}

#=================================
log_find_geo() {
    log=/mnt/runtimes/$mcver/proxy.log.0
    [ -f $log ] && log_find_geo_bc || log_find_geo_mc
}

#=================================
alias sls='screen -ls'
alias swp='screen -wipe'
alias sr='screen -r $mcver'

#=================================
alias mcprep=server.prep

#=================================
# alias mctest='mcwaituntilready'

#=================================
#alias mced='vi /home/sita/script/minecraft/$mcver'
alias mced='vi /home/sita/script/minecraft/minecraft.server'

#=================================
# alias gamestop='mcserver backup && mcserver stop'
# alias mcstart='mcserver start'
alias mcss='mcprep && mcserver start && mcw on && sleep 1 && mclog'
# alias mcww='mcprep && mcserver start && mcw off && mclf && mcserver do seed'
alias mcww='mcprep && mcserver start && mcw off && mclf'
alias mcstop='mcdo end && mcserver stop'
alias mclog='mcserver log $*'
alias mcload='mcserver load'
alias mcsave='mcserver force-save'
# alias mcdo='mcserver do'
alias mcstat='mcserver status'
# alias mcreport='mcserver crashreport'
alias mcbackup='mcserver backup'
alias mcrestore='mcserver restore $*'
# alias mcrematch='mcserver pre_restore && mcserver restore $* && mcprep && mcserver start && sleep 1 && mclog'
# alias mckill='mcserver kill'
# alias mchalt='mcdo end && mcserver halt && swp'
#alias mchalt='mcdo end && mcserver halt'
alias mchalt='mcserver halt'
alias mcreload='mchalt && mcprep && mcserver start'

#=================================
alias mcrematch='rematch $*'

#=================================
alias mclf="mcdo gamerule logAdminCommands false"

#=================================
alias mcseal='mcserver seal'

#=================================
alias debug='export mc_debug_mode=1'
alias debugoff='export mc_debug_mode='

#=================================
# alias lag='logs | grep.lag && ~/start.mc.sh lag'
help_add 'lag' '顯示lag'
alias lag='lag_check'
# help_add 'clag' '顯示clag'
alias clag='clag_check'
help_add 'tmo' 'Spigot計時開始'
alias tmo='mcdo timings on'
# help_add 'tmr' '計時報告'
alias tmr='timings_report'
help_add 'cheat' '顯示犯規紀錄'
alias cheat='cheat_report'
#=================================
# help_add 'mcip.<id>' '找出登入ip'
# alias mcip='cat /mnt/runtimes/$mcver/logs/latest.log | grep -A 3 $*'
help_add 'lf.<keyword>' '搜尋紀錄'
alias lf='log_find $*'
help_add 'lfg' '搜尋所有id,location'
alias lfg='log_find_geo'
