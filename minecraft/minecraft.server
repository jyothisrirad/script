#!/bin/bash
# /etc/init.d/minecraft

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

. /home/sita/script/include/console.color

#Settings
# FULL=$(readlink -e $0)
# DP0=$(dirname $FULL)
DP0=/home/sita/script/minecraft
VERSION=$(basename $0)
[ $JARFILE ] || JARFILE="$VERSION.jar"
# USERNAME="vagrant"
MCSTORE="/mnt/runtimes/$VERSION"
# USERNAME=$(whoami)
USERNAME=sita
[ ! -f $MCSTORE/config.sh ] || . $MCSTORE/config.sh
# MCPATH="/tmp/$VERSION"
[ $MCPATH ] || MCPATH=$MCSTORE
# CPU_COUNT=1
[ "$INVOCATION" ] || INVOCATION="java $JAVAARGS -server -jar $JARFILE -o false"
# BACKUPPATH="/vagrant/backup"
WORLD=world
# LOG="$MCPATH/logs/latest.log"
RSYNCOPT="-rtv --progress --delete --exclude=$WORLD.bak --exclude=plugins.tried"
ME=`whoami`
DIRTYBIT="$MCPATH/logs/mc_playeronline"
[ $LOG_DELAY ] || LOG_DELAY=.1

as_user() {
  if [ "$ME" == "$USERNAME" ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

mc_status() {
  # ps aux|grep -F -v grep|grep -F $VERSION|grep -F --quiet $JARFILE
  ps aux|grep -F -v grep|grep -F -v bash|grep -F --quiet $VERSION
  return $?
}

mc_start() {
  if mc_status; then
    echo "Tried to start but $JARFILE was already running!"
  else
	[ -d $MCSTORE ] || { echo $MCSTORE, Path not found.; return; }
	
	[ ! -f "$LOOPSTOP" ] || rm "$LOOPSTOP" #remove loopstop flag
	
    echo "$JARFILE was not running... starting."
    if [ -d $MCSTORE/$WORLD.bak ]; then
      echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
      exit 1
    fi
    # cd $MCPATH
    if [ ! -f "$MCPATH/$JARFILE" ]; then 
      echo "Ram drive empty...  prepping."
      # as_user "cp -R $MCSTORE/* $MCPATH/"
      echo -e ${YELLOW}== rsync $MCSTORE/ to $MCPATH/
	  as_user "rsync $RSYNCOPT $MCSTORE/ $MCPATH/"
      echo -e ${NC}
    else
      if [ ! "$MCSTORE" == "$MCPATH" ]; then
          echo -e ${YELLOW}== rsync $MCSTORE/ to $MCPATH/
          as_user "rsync $RSYNCOPT $MCSTORE/ $MCPATH/"
          echo -e ${NC}
      fi
    fi
    # echo as_user "cd $MCPATH && screen -dmS $VERSION $INVOCATION"
    as_user "cd $MCPATH && screen -dmS $VERSION $INVOCATION"
    sleep 7
    if mc_status; then
      echo "$JARFILE is now running."
    else
      echo "Could not start $JARFILE."
    fi
  fi
}

mc_stop() {
  if mc_status; then
    echo "$JARFILE is running... stopping."
    TO_SCREEN="screen -p 0 -S $VERSION -X eval 'stuff "
    as_user "$TO_SCREEN \"say 伺服器將在5秒內關閉. 儲存世界中...\"\015'"
    as_user "$TO_SCREEN \"save-all\"\015'"
    sleep 5
    as_user "$TO_SCREEN \"end\"\015'"
    as_user "$TO_SCREEN \"stop\"\015'"
    sleep 5
  else
    echo "$JARFILE was not running."
  fi

  if mc_status; then
    echo "$JARFILE could not be shut down... still running."
  else
    echo "$JARFILE is shut down."
  fi
}

mc_update() {
   if mc_status; then
    echo "$JARFILE is running! Will not start update."
   else
     as_user "cd $MCPATH && wget -q -O $MCPATH/versions http://s3.amazonaws.com/Minecraft.Download/versions/versions.json"
        snap=`awk -v linenum=3 'NR == linenum {print; exit}' "$MCPATH/versions"`
        snapVersion=`echo $snap | awk -F'\"' '{print $4}'`
        re=`awk -v linenum=4 'NR == linenum {print; exit}' "$MCPATH/versions"`
        reVersion=`echo $re | awk -F'\"' '{print $4}'`
        as_user "rm $MCPATH/versions"
        if [ "$1" == "snapshot" ]; then
        MC_SERVER_URL=http://s3.amazonaws.com/Minecraft.Download/versions/$snapVersion/minecraft_server.$snapVersion.jar
        else
        MC_SERVER_URL=http://s3.amazonaws.com/Minecraft.Download/versions/$reVersion/minecraft_server.$reVersion.jar
        fi
     as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update $MC_SERVER_URL"
     if [ -f $MCPATH/minecraft_server.jar.update ]
     then
       if `diff $MCPATH/$JARFILE $MCPATH/minecraft_server.jar.update >/dev/null`
       then 
         echo "You are already running the latest version of $JARFILE."
		 as_user "rm $MCPATH/minecraft_server.jar.update"
       else
         as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/$JARFILE"
         echo "Minecraft successfully updated."
       fi
     else
       echo "Minecraft update could not be downloaded."
     fi
   fi
 }

mc_savetodisk_offline() {
  if [ ! "$MCSTORE" == "$MCPATH" ]; then
	   echo "Saving ramdrive to disk."
	   if [ ! -f $MCPATH/$JARFILE ]; then 
		 echo "Error.. Minecraft not in ram"
	   else
		 if [ -d $MCSTORE/$WORLD.bak ]; then
			echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
			exit 1
		 fi
		 if [ -d $MCSTORE/$WORLD ]; then
		   as_user "mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak"
		 fi

		 echo "Saving, screen session closed"
		 # as_user "cp -R $MCPATH/* $MCSTORE/"
         if [ ! "$MCSTORE" == "$MCPATH" ]; then
             echo -e ${YELLOW}== rsync $MCPATH/ to $MCSTORE/
             as_user "rsync $RSYNCOPT $MCPATH/ $MCSTORE/"
             echo -e ${NC}
         fi

		 if [ -d $MCSTORE/$WORLD.bak ]; then
		   as_user "rm -r $MCSTORE/$WORLD.bak"
		 fi
	   fi
  # else
	  # echo "Not on ramdrive, No need to save."
  fi
}

mc_savetodisk_online() {
  if [ ! "$MCSTORE" == "$MCPATH" ]; then
	  if mc_status; then
		echo "Saving ramdrive to disk."
		if [ ! -f $MCPATH/$JARFILE ]; then
		  echo "Error.. Minecraft not in ram"
		else
		  if [ -d $MCSTORE/$WORLD.bak ]; then
			echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
			exit 1
		  fi
		  if [ -d $MCSTORE/$WORLD ]; then
			as_user "mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak"
		  fi

		  TO_SCREEN="screen -p 0 -S $VERSION -X eval 'stuff "
		  as_user "$TO_SCREEN \"save-off\"\015'"
		  as_user "$TO_SCREEN \"save-all\"\015'" 
		  # as_user "cp -R $MCPATH/* $MCSTORE/"
          if [ ! "$MCSTORE" == "$MCPATH" ]; then
              echo -e ${YELLOW}== rsync $MCPATH/ to $MCSTORE/
              as_user "rsync $RSYNCOPT $MCPATH/ $MCSTORE/"
              echo -e ${NC}
          fi
		  as_user "$TO_SCREEN \"save-on\"\015'"

		  if [ -d $MCSTORE/$WORLD.bak ]; then
			as_user "rm -r $MCSTORE/$WORLD.bak"
		  fi
		fi
	  else
		echo "Service is not running"
	 fi
  # else
	  # echo "Not on ramdrive, No need to save."
  fi
}

mc_saveoff() {
  if mc_status; then
    echo "$JARFILE is running... suspending saves"
    TO_SCREEN="screen -p 0 -S $VERSION -X eval 'stuff "
    as_user "$TO_SCREEN \"say 伺服器開始備份. 暫時進入唯讀狀態...\"\015'"
    as_user "$TO_SCREEN \"save-off\"\015'"
    as_user "$TO_SCREEN \"save-all\"\015'"
    sync
    sleep 10
  else
    echo "$JARFILE was not running. Not suspending saves."
  fi
}

mc_saveon() {
  if mc_status; then
    echo "$JARFILE is running... re-enabling saves"
    TO_SCREEN="screen -p 0 -S $VERSION -X eval 'stuff "
    as_user "$TO_SCREEN \"save-on\"\015'"
    as_user "$TO_SCREEN \"say 伺服器備份完成. 回復正常狀態.\"\015'"
  else
    echo "$JARFILE was not running. Not resuming saves."
  fi
}

mc_backup() {
  if mc_status; then
    echo "Backing up minecraft files"
	# as_user "tar zcf $BACKUPPATH/MCBKUP_`date "+%Y.%m.%d-%H"`.tar.gz $MCSTORE"
    if [ ! "$MCSTORE" == "$MCPATH" ]; then
        echo -e ${YELLOW}== rsync $MCPATH/ to $MCSTORE/
        as_user "rsync $RSYNCOPT $MCPATH/ $MCSTORE/"
        echo -e ${NC}
    fi
	# as_user "$MCSTORE/backup.sh"
	ZIPOPT="-x@$DP0/minecraft.exclude.txt"; export ZIPOPT
	as_user "$DP0/backup.sh $MCSTORE $1"
	echo "Backup complete"
  else
    echo "$JARFILE was not running. No need to backup."
  fi
}

mc_backup_ex() {
  echo "Backing up minecraft files"
  
  if mc_status; then mc_saveoff; fi
  
  ZIPTAIL="seal"; export ZIPTAIL
  as_user "$DP0/backup.sh $MCSTORE $1"
  unset ZIPTAIL
  echo "Backup complete"
  
  if mc_status; then mc_saveon; fi
}

mc_restore() {
   [ -f $1 ] && echo "Restoring minecraft files to disk: $1"
   # as_user "$MCSTORE/restore.sh $1"
   as_user "$DP0/restore.sh $MCSTORE $1"
   echo "Restore complete"
}

mc_pre_restore() {
   if [ ! -z ${MCSTORE+x} ]; then 
	   echo "Prepare minecraft files before restore in $MCSTORE "
	   tempdir=/tmp/$RANDOM
	   tempsh=/tmp/test.sh
	   mkdir $MCSTORE/temp >/dev/null
	   pushd $MCSTORE
	   echo "shopt -s extglob" >$tempsh
	   echo "mv !(config.sh|logs|temp) temp" >>$tempsh
	   echo "shopt -u extglob" >>$tempsh
	   . $tempsh
	   mv -f $MCSTORE/temp $tempdir
	   echo "Prepare complete"
   fi
}

mc_load() {
  if [ ! "$MCSTORE" == "$MCPATH" ]; then
	   echo "Loading minecraft files to Ramdisk"
	   # as_user "cp -R $MCSTORE/* $MCPATH/"
       echo -e ${YELLOW}== rsync $MCSTORE/ to $MCPATH/
       as_user "rsync $RSYNCOPT $MCSTORE/ $MCPATH/"
       echo -e ${NC}
	   echo "Load complete"
  # else
	  # echo "Not on ramdrive, No need to load."
  fi
}

mc_command() {
  command="$1";
  if mc_status; then
    [ ! -f "$LOG" ] || pre_log_len=`wc -l "$LOG" | awk '{print $1}'`
    [ $mcecho_off ] || echo "$JARFILE is running... executing command"
    # echo as_user "screen -p 0 -S $VERSION -X eval 'stuff \"$command\"\015'"
    as_user "screen -p 0 -S $VERSION -X eval 'stuff \"$command\"\015'"
    sleep $LOG_DELAY # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    # [ ! -f "$LOG" ] || tail -n $[`wc -l "$LOG" | awk '{print $1}'`-$pre_log_len] "$LOG" | sed "s/$yellow//g" | sed "s/$green//g" | sed "s/$white//g"
    [ ! -f "$LOG" ] || tail -n $[`wc -l "$LOG" | awk '{print $1}'`-$pre_log_len] "$LOG" | sed "s/§.//g"
  fi
}

mc_save_crashreport() {
  if [ ! "$MCSTORE" == "$MCPATH" ]; then
    echo -e ${YELLOW}== rsync $MCPATH/crash-reports/ to $MCSTORE/crash-reports/
	as_user "rsync $RSYNCOPT $MCPATH/crash-reports/ $MCSTORE/crash-reports/"
    echo -e ${NC}
  # else
	  # echo "Not on ramdrive, No need to save report."
  fi
}

crontab_status() {
	status=$(crontab -l)
	return $?
}

addto_crontab() {
	(crontab -l; echo "$*") | crontab -
}

delfrom_crontab() {
	line=$*
	line=$(echo "$line" | sed 's/\//\\\//g')
	crontab -l | sed "/$line/d" | crontab -
}

delfile() {
	if [ -e $1 ]; then
		echo Removing $1
		sudo rm $1
	fi
}

deldir() {
	if [ -d $1 ]; then
		echo Removing $1
		sudo rm -rf $1
	fi
}

mc_playeronline() {
	# mcdo list | tail -1 | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | awk '{printf ("%s %s\n", $4, $5)}' | sed 's/\[[^]]*\]//g' | sed 's/not found//g' | sed 's/default://g' | sed 's/There are//g' | sed 's/Admins: //g' | sed 's/當前有 0//g' | sed 's/executing command//g' | grep -n '[A-Za-z0-9\-\_]+'
	mc_command list | tail -1 | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | awk '{printf ("%s %s\n", $4, $5)}' | sed 's/\[[^]]*\]//g' | sed 's/not found//g' | sed 's/default://g' | sed 's/There are//g' | sed 's/Admins: //g' | sed 's/當前有 0//g' | sed 's/executing command//g' | grep -E --quiet '[A-Za-z0-9\-\_]+'
	return $?
}

. $DP0/minecraft.logs

#Start-Stop here
case "$1" in
  status)
    if mc_status; then
      echo "$VERSION/$JARFILE is running."
    else
      echo "$VERSION/$JARFILE is not running."
    fi
    ;;
  start)
	# showstat
    mc_start
	[ ! $archives ] || $0 install
    ;;
  stop)
    mc_savetodisk_online
    mc_backup $2
    mc_stop
	[ ! $archives ] || $0 remove_cron
    # mc_savetodisk_offline
	# showstat
    ;;
  restart)
    mc_stop
    mc_savetodisk_offline
    mc_start
    ;;
  update)
    # mc_backup $2
    # mc_stop
    # mc_update
    # mc_start
	echo "Not Supported."
    ;;
  force-save)
    mc_savetodisk_offline
    ;;
  save)
	if [ "$2" = "on" ]; then
		mc_saveon
	elif [ "$2" = 'off' ]; then
		mc_saveoff
	else
		mc_savetodisk_online
	fi
	if mc_status; then
		if mc_playeronline; then
			# echo player online
			touch $DIRTYBIT
		fi
	fi	
    ;;
  seal)
	if [ -d $MCSTORE ]; then
		echo -e "${RED}Sealing $MCSTORE${NC}"
		mc_backup_ex $2
		if mc_status; then mc_stop; fi
		
		tempdir=/tmp/$RANDOM
		echo Moving $MCSTORE to $tempdir
		[ ! -d $tempdir/$MCSTORE ] || rm -rf $tempdir/$MCSTORE
		[ -d $tempdir ] || mkdir $tempdir
		[ ! -d $MCSTORE ] || mv -f $MCSTORE $tempdir
	else
		echo $MCSTORE is not existed.
	fi
    ;;
  # crashreport)
	# mc_save_crashreport
    # ;;
  load)
	if mc_status; then
	  mc_stop
	  mc_load
	  mc_start
	else
	  mc_load
    fi
    ;;
  backup)
    # mc_savetodisk_online
	mc_saveoff
    mc_backup $2
	mc_saveon
    ;;
  restore)
	if [ ! "$2" = '?' ]; then
		if mc_status; then
		  mc_stop
		  mc_restore $2
		  mc_load
		  mc_start
		else
		  mc_restore $2
		  mc_load
		fi
	else
		mc_restore $2
	fi
    ;;
  pre_restore)
	if mc_status; then
      mc_stop
	  mc_pre_restore
	  mc_start
	else
	  mc_pre_restore
    fi
    ;;
  do)
    if [ $# -gt 1 ]; then
      shift
      mc_command "$*"
    else
      echo "請指定伺服器命令，比如help."
    fi
	;;
  log)
	if [ "$2" ]; then
		logs.grep $2 >"$MCPATH/logs/$2.log"
		cat "$MCPATH/logs/$2.log"
	else
		[ ! -f "$LOG" ] || tail -f $LOG
	fi
	;;
  check)
	if ! mc_status; then
		echo "$JARFILE is Offline."
	else
		tmpfile="/tmp/mc.log"
		mc_command "list" > $tmpfile
		if [ -s $tmpfile ]; then
			echo "$JARFILE is Online."
		else
			echo "$JARFILE is Not Responding."
		fi
		rm $tmpfile
	fi
	;;	
  install)
	$0 remove_cron
	# sudo cp $0 /etc/init.d/
	# sudo chmod a+x /etc/init.d/$(basename $0)
	# addto_crontab "#$VERSION server"
	# addto_crontab "*/5 * * * * /etc/init.d/$(basename $0) save"
	# addto_crontab "24 */6 * * * /etc/init.d/$(basename $0) backup"
	addto_crontab "#$VERSION server"
	addto_crontab "*/5 * * * * /bin/bash $(readlink -e $0) save"
	# addto_crontab "24 */6 * * * $(readlink -e $0) backup"
	addto_crontab "$(shuf -i 1-60 -n 1) * * * * /bin/bash $(readlink -e $0) archive"
	# crontab -l
	;;
  remove_cron)
	echo delfrom_crontab "$(basename $0)"
	delfrom_crontab "#$VERSION server"
	delfrom_crontab "$(basename $0)"
	# crontab -l
    ;;
  uninstall)
  	if mc_status; then
	  mc_stop
	fi
	delfile /etc/init.d/$(basename $0)
	deldir $MCPATH
	$0 remove_cron
	;;
  # kill)
	# tmpfile="/tmp/mc.log"
	# mc_command "list" > $tmpfile
	# if [ -s $tmpfile ]; then
		# echo "$JARFILE is Online. No kill."
	# else
		# echo "$JARFILE is Not Responding, forcing Server to Stop."
		# pids=$(ps aux | grep -F -v grep | grep $VERSION | awk '{print $2}')
		# for pid in $pids
		# do
			# echo kill -9 $pid
			# kill -9 $pid
		# done
	# fi  
    # ;;
  halt)
	if mc_status; then
		mc_savetodisk_online
		
		[ ! "$LOOPSTOP" ] || touch "$LOOPSTOP" #create loopstop flag for loop.sh
	
		mc_stop
		# pids=$(ps aux|grep -F -v grep|grep $VERSION|grep $JARFILE|awk '{print $2}')
		pids=$(ps aux|grep -F -v grep|grep -F -v bash|grep $VERSION|awk '{print $2}')
		for pid in $pids
		do
			# sudo cat /proc/$pid/cmdline
			cmdline=\'$(cat /proc/$pid/cmdline)\'
			# echo kill -9 $pid
			echo kill -9 $cmdline
			kill -9 $pid
            screen -wipe
		done
	fi
	[ ! $archives ] || $0 remove_cron
	# showstat
    ;;
  archive)
	# if mc_status; then
		# if mc_playeronline; then
			## echo player online
			# $0 backup $archives
		# fi
	# fi
	if ! mc_playeronline; then
		if [ -f $DIRTYBIT ]; then
			rm $DIRTYBIT
			$0 backup $archives
		fi
	fi
    ;;
  *)
  echo "Usage: /etc/init.d/$0 {start|stop|backup|do|halt|log|restore|pre_restore|seal|status}"
  # echo "Usage: /etc/init.d/$0 {crashreport|kill|update}"
  # echo "Usage: /etc/init.d/$0 {restart|force-save|load|check|save}"
  exit 1
  ;;
esac

